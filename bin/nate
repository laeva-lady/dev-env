#! /usr/bin/bash

# Copies dotfiles to this repo, then update remote if the user wants
#
DOTFILES="$WORKSTATION/dotfiles.sh"

update_env_files() {
    source "$DOTFILES"

    echo "Updating envs files üìÅ:"
    rm -r "$WORKSTATION/env/"
    mkdir -p "$WORKSTATION/env/"
    for env_file in "${envs[@]}"; do
        echo -e "\t\t- $env_file"
        cp "$HOME/$env_file" "$WORKSTATION/env/"
    done

    echo "Updating configs files üóÉÔ∏è:"
    rm -rf "$WORKSTATION/env/.config"
    mkdir -p "$WORKSTATION/env/.config"
    for config_item in "${confs[@]}"; do
        SOURCE_PATH="$HOME/.config/$config_item"
        DEST_PATH="$WORKSTATION/env/.config/$config_item"

        echo -e "\t\t- $config_item"

        if [[ -d "$SOURCE_PATH" ]]; then
            mkdir -p "$DEST_PATH"
            find "$SOURCE_PATH" \( -type f -o -type d \) ! -type l -print0 |
                while IFS= read -r -d $'\0' item; do
                    RELATIVE_PATH="${item#$SOURCE_PATH/}"
                    DEST_ITEM="$DEST_PATH/$RELATIVE_PATH"

                    if [[ -d "$item" ]]; then
                        mkdir -p "$DEST_ITEM"
                    elif [[ -f "$item" ]]; then
                        cp "$item" "$DEST_ITEM"
                    fi
                done
        elif [[ -f "$SOURCE_PATH" && ! -L "$SOURCE_PATH" ]]; then
            cp "$SOURCE_PATH" "$DEST_PATH"
        elif [[ -L "$SOURCE_PATH" ]]; then
            echo -e "\t\tSkipping top-level symlink: $config_item"
        fi

        rm -rf "$DEST_PATH/.git"
    done
}

sync_files() {
    update_env_files

    echo "Copying vscode user settings"
    cp ~/.config/Code/User/settings.json $WORKSTATION/resources/Code
    cp ~/.config/Code/User/keybindings.json $WORKSTATION/resources/Code

    echo "Copying vscode-oss user settings"
    cp ~/.config/Code\ -\ OSS/User/settings.json $WORKSTATION/resources/Code\ -\ OSS
    cp ~/.config/Code\ -\ OSS/User/keybindings.json $WORKSTATION/resources/Code\ -\ OSS

    echo "Copying Cursor user settings"
    cp ~/.config/Cursor/User/settings.json $WORKSTATION/resources/Cursor
    cp ~/.config/Cursor/User/keybindings.json $WORKSTATION/resources/Cursor

    echo "Copying icons"
    rsync -a ~/.local/share/icons/ $WORKSTATION/resources/icons
    echo "Copying themes"
    rsync -a ~/.themes/ $WORKSTATION/resources/themes

    echo "Copying root files"
    sudo cp /etc/sudoers $WORKSTATION/root/etc/sudoers
    sudo chown $USER:$USER $WORKSTATION/root/etc/sudoers
    sudo cp -r /usr/share/sddm $WORKSTATION/root/usr/share/

    cp $HOME/.gitconfig $HOME/personal

    git -C "$WORKSTATION" -c color.status=always status
}

sync_remote() {
    echo "Updating remote repo"
    {
        cd $WORKSTATION

        git -C "$WORKSTATION" -c color.status=always status
        # Use plain text (no colors) to check for "nothing to commit"
        status=$(git -C "$WORKSTATION" status --porcelain)

        if [[ -z "$status" ]]; then
            exit 0
        fi

        git add .
        git -C "$WORKSTATION" status
        if [ -z "$1" ]; then
            git commit -m "chore: automated commit"
        else
            git commit -m "$1"
        fi
        git push
    }
}

sync_diff() {
    echo "Checking Diff"
    sleep 0.5
    {
        cd $WORKSTATION

        sync_status

        git diff
    }
}

case "$1" in
"s" | "sync")
    sync_remote "$2"
    ;;
"d" | "diff")
    sync_diff
    ;;
"z" | "zen")
    zen-browser --new-tab "https://github.com/laeva-lady/denver"
    ;;
*)
    sync_files
    ;;
esac
