#! /usr/bin/bash

# Copies dotfiles to this repo, then update remote if the user wants
log() {
    if [ "$VERBOSE" = true ]; then
        echo -e "$1"
    fi
}

update_env_files() {
    source "$DOTFILES"

    echo "Updating envs files üìÅ:"
    rm -r "$DEV_ENV/env/"
    mkdir -p "$DEV_ENV/env/"
    for env_file in "${envs[@]}"; do
        log "\t\t- $env_file"
        cp "$HOME/$env_file" "$DEV_ENV/env/"
    done

    echo "Updating configs files üóÉÔ∏è:"
    rm -rf "$DEV_ENV/env/.config"
    mkdir -p "$DEV_ENV/env/.config"
    for config_item in "${confs[@]}"; do
        SOURCE_PATH="$HOME/.config/$config_item"
        DEST_PATH="$DEV_ENV/env/.config/$config_item"

        log "\t\t- $config_item"

        if [[ -d "$SOURCE_PATH" ]]; then
            mkdir -p "$DEST_PATH"
            find "$SOURCE_PATH" \( -type f -o -type d \) ! -type l -print0 |
                while IFS= read -r -d $'\0' item; do
                    RELATIVE_PATH="${item#$SOURCE_PATH/}"
                    DEST_ITEM="$DEST_PATH/$RELATIVE_PATH"

                    if [[ -d "$item" ]]; then
                        mkdir -p "$DEST_ITEM"
                    elif [[ -f "$item" ]]; then
                        cp "$item" "$DEST_ITEM"
                    fi
                done
        elif [[ -f "$SOURCE_PATH" && ! -L "$SOURCE_PATH" ]]; then
            cp "$SOURCE_PATH" "$DEST_PATH"
        elif [[ -L "$SOURCE_PATH" ]]; then
            echo -e "\t\tSkipping top-level symlink: $config_item"
        fi

        rm -rf "$DEST_PATH/.git"
    done
}

DOTFILES="$DEV_ENV/dotfiles.sh"

sync_files() {
    update_env_files

    echo "Copying vscode user settings"
    cp ~/.config/Code/User/settings.json $DEV_ENV/resources/Code
    cp ~/.config/Code/User/keybindings.json $DEV_ENV/resources/Code

    echo "Copying vscode-oss user settings"
    cp ~/.config/Code\ -\ OSS/User/settings.json $DEV_ENV/resources/Code\ -\ OSS
    cp ~/.config/Code\ -\ OSS/User/keybindings.json $DEV_ENV/resources/Code\ -\ OSS

    echo "Copying Cursor user settings"
    cp ~/.config/Cursor/User/settings.json $DEV_ENV/resources/Cursor
    cp ~/.config/Cursor/User/keybindings.json $DEV_ENV/resources/Cursor

    echo "Copying icons"
    rsync -a ~/.local/share/icons/ $DEV_ENV/resources/icons
    echo "Copying themes"
    rsync -a ~/.themes/ $DEV_ENV/resources/themes

    echo "Copying root files"
    sudo cp /etc/sudoers $DEV_ENV/root/etc/sudoers
    sudo chown $USER:$USER $DEV_ENV/root/etc/sudoers
    sudo cp -r /usr/share/sddm $DEV_ENV/root/usr/share/

    cp $HOME/.gitconfig $HOME/personal

}
sync_status() {
    echo "Checking status"
    git -C "$DEV_ENV" -c color.status=always status
}

sync_remote() {
    echo "Updating remote repo"
    {
        cd $DEV_ENV

        # Use plain text (no colors) to check for "nothing to commit"
        status=$(git -C "$DEV_ENV" status --porcelain)

        if [[ -z "$status" ]]; then
            exit 0
        fi

        git add .
        git -C "$DEV_ENV" status
        if [ "$SYNC_EDITOR" = false ]; then
            if [ -z "$1" ]; then
                git commit -m "chore: automated commit"
            else
                git commit -m "$1"
            fi
        else
            git commit
        fi
        git push
    }
}

sync_diff() {
    echo "Checking Diff"
    sleep 0.5
    {
        cd $DEV_ENV

        sync_status

        git diff
    }
}

echo "
     _____________________________________
    |                                     |
    | ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó |
    | ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù |
    | ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   |
    | ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   |
    | ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó |
    | ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù |
    |_____________________________________|

"

print_usage() {
    echo "Usage: nate <flags> <git commit message>"
    echo -e "  Flags:"
    echo -e "\td  SYNC_CHECK_DIFF   (default: false)    changes the value to true"
    echo -e "\te  SYNC_EDITOR       (default: false)    changes the value to true"
    echo -e "\tn  OPEN_ZEN          (default: false)    changes the value to true"
    echo -e "\ts  SYNC_REMOTE       (default: false)    changes the value to true"
    echo -e "\tv  VERBOSE           (default: false)    changes the value to true"
    echo -e "\tx  SYNC_FILES        (default: true)     changes the value to false"
    echo -e "\tx  PRINT_USAGE       (default: false)    changes the value to true"
    exit 0
}

VERBOSE=false
SYNC_REMOTE=false
SYNC_EDITOR=false
SYNC_CHECK_DIFF=false
SYNC_FILES=true
OPEN_ZEN=false
PRINT_USAGE=false


arg="$1" # Assign first script argument to 'arg'
for ((i = 0; i < ${#arg}; i++)); do
    ch="${arg:$i:1}"
    case "$ch" in
    "d") SYNC_CHECK_DIFF=true ;;
    "e") SYNC_EDITOR=true ;;
    "n") OPEN_ZEN=true ;;
    "s") SYNC_REMOTE=true ;;
    "v") VERBOSE=true ;;
    "x") SYNC_FILES=false ;;
    "h") PRINT_USAGE=true ;;
    *) new_args+=("-$ch") ;;
    esac
done

log "VERBOSE           $VERBOSE"
log "SYNC_FILES        $SYNC_FILES"
log "SYNC_REMOTE       $SYNC_REMOTE"
log "SYNC_EDITOR       $SYNC_EDITOR"
log "SYNC_CHECK_DIFF   $SYNC_CHECK_DIFF"
log "OPEN_ZEN          $OPEN_ZEN"
log "PRINT_USAGE       $PRINT_USAGE"
log ""

if [ "$PRINT_USAGE" = true ]; then
    print_usage
    exit 0
fi

if [ "$SYNC_FILES" = true ]; then
    sync_files
    sync_status
fi

if [ "$SYNC_CHECK_DIFF" = true ]; then
    sync_diff
fi
if [ "$SYNC_REMOTE" = true ]; then
    sync_remote "$2"
fi
if [ "$OPEN_ZEN" = true ]; then
    zen-browser --new-tab "https://github.com/laeva-lady/dev-env"
fi
